@using PagesLibrary.Data.Comment;

@inject ILogger<CommentComponentList> _logger
@inject NavigationManager _navigation
@inject PopupListService _popUp
@inject IReaction _reaction
@inject ICommentApi _commentApi
@inject ModalPopUpService _modal
@inject Service.LoginPopUpService _loginPopUp

<AuthorizeView>
    <Authorized>
        <button class="btn btn-outline-primary border-0" style="transform:scale(0.8)" @onclick="@(()=>addComment=!addComment)">Dodaj odpowiedź</button>
    </Authorized>
    <NotAuthorized>
        <button class="btn btn-outline-primary border-0" style="transform:scale(0.8)" @onclick="@(()=>_loginPopUp.ShowPopUp())">Dodaj odpowiedź</button>
    </NotAuthorized>
</AuthorizeView>


@if (addComment)
{
    <AuthorizeView Context="authContext">
        <Authorized>

            <EditForm Context="formContext" Model="@NewComment" OnValidSubmit="@OnValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="p-2 w-100">
                    <InputTextArea class="bg-black text-white w-100" @bind-Value="@NewComment.Description" placeholder="Nowy komentarz" />
                    <div class="float-end pb-1">
                        <button type="submit" class="btn btn-outline-primary" aria-label="submit">Prześlij</button>
                    </div>
                </div>
            </EditForm>
        </Authorized>
    </AuthorizeView>
}
@if (_commentModel != null)
{
    <div class="d-inline-block w-100 ps-5">
        @for (int i = 0; i < _commentModel.Length; i++)
        {
            var index = i;
            <div>
                <AnswerCommentComponent AnswerCommentModel="_commentModel[index]" />
            </div>
        }
    </div>
}
else
{
    <span>Loading...</span>
}


@code {

    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public int OrderTyp { get; set; }

    bool addComment { get; set; }

    CommentModel[]? _commentModel { get; set; }
    CommentAdd? NewComment { get; set; } = new CommentAdd();

}
