@using PagesLibrary.Data.File;
@using PagesLibrary.Service;

@inject ILogger<MainFilePage> _logger
@inject IFileManager _iFileManager
@inject NavigationManager _navigation
@inject PopupListService _popUp
@inject IReaction _reaction
@inject MainFilePopUpService _mainPopup
@inject PagesLibrary.Service.LoginPopUpService _LoginPopup


@if (TaskModel != null)
{
    <div class="p-1 bg-gradient rounded-top">

        @if (TaskModel.Banned)
        {
            <div class="w-100 bg-danger text-center">
                Dany post został zbanowany
            </div>
        }

        <Microsoft.AspNetCore.Components.Routing.NavLink class="nav-link" href="@($"/obj/{TaskModel.Id}")">
            <h4 class="">@TaskModel.Title</h4>
        </Microsoft.AspNetCore.Components.Routing.NavLink>
        <div class="d-inline-flex h-auto">
            <AvatarComponent AvatarSize="@Memy.Shared.Helper.MyEnums.AvatarSize.File" ImgName="@TaskModel.User.Avatar" />
            <div class="h-auto justify-content-center m-auto">
                <div class="top-50">@TaskModel.User.Name</div>
                <div class="top-50">@_date</div>
            </div>
        </div>
        <div>
            @if (TaskModel.Tag != null)
            {
                for (int j = 0; j < TaskModel.Tag.Length; j++)
                {
                    <span>@TaskModel.Tag[j].Value &nbsp;</span>
                }
            }
        </div>
        <div>
            @if (TaskModel.Description != null)
            {
                @if (TaskModel.Description.Length > _descriptionLength)
                {
                    <details class="">
                        <summary class="">
                            @(GetFirstSegment(TaskModel.Description).ToString())

                        </summary>
                        @(GetRestSegment(TaskModel.Description).ToString())
                    </details>
                }
                else
                {
                    <p>
                        @TaskModel.Description
                    </p>
                }
            }
        </div>
        <div>
            @if (TaskModel.FileModel != null)
            {
                if (TaskModel.FileModel.Length > 1)
                {
                    <div class="m-auto d-flex justify-content-center">
                        <div class="float-start">
                            @for (int j = 0; j < TaskModel.FileModel.Length; j++)
                            {
                                var img = j;
                                <button class="btn p-1 " @onclick="@(()=>ChangeImg(img))">
                                    @if (!string.IsNullOrWhiteSpace(TaskModel.FileModel[j].ObjName))
                                    {
                                        <span class="smallObj">
                                            <ObjectTypeComponent IsSmall="true" fileModel="TaskModel.FileModel[j]"></ObjectTypeComponent>
                                        </span>
                                    }
                                </button>
                            }
                        </div>
                    </div>
                }
                <div class="position-relative m-auto justify-content-center d-flex">

                    @if (TaskModel.FileModel.Length > 1)
                    {
                        <span class="arrow-left swip-arrow">
                            <button class="btn btn-outline-primary border-0 oi oi-arrow-thick-left px-1 arrow-size-2 rounded-circle top-50" @onclick="@(ImgLeft)"></button>
                        </span>
                    }
                    @if (!string.IsNullOrWhiteSpace(TaskModel.FileModel[_maingImg].ObjName))
                    {
                        <ObjectTypeComponent fileModel="TaskModel.FileModel[_maingImg]"></ObjectTypeComponent>
                    }

                    @if (TaskModel.FileModel.Length > 1)
                    {
                        <span class="arrow-right swip-arrow">
                            <button class="btn btn-outline-primary border-0 oi oi-arrow-thick-right px-1  arrow-size-2 rounded-circle top-50" @onclick="@(ImgRight)"></button>
                        </span>
                    }

                </div>
            }
        </div>

        <div class="p-1">
            <div class="m-auto d-flex justify-content-center">

                <AdminPanelComponent Model="@TaskModel" Func="Func"></AdminPanelComponent>

                <ReportButtonComponent Reported="TaskModel.Reported" Id="TaskModel.Id"></ReportButtonComponent>


                @if (Id <= 0)
                {
                    <span class="px-1">
                        <button class="btn btn-outline-primary text-white " @onclick="@(() => _mainPopup.ShowPopUp(TaskModel))">
                            <span class="oi oi-chat"></span>
                            <span class="hideTextInSmall">Komentarze</span>
                        </button>
                    </span>
                }

                <div class="px-1">
                    <div class="border border-1 border-primary form-check-inline me-0 rounded-3 ">
                        <AuthorizeView>
                            <Authorized>
                                @if (TaskModel.Reaction.Value >= 0)
                                {
                                    <button class="btn btn-outline-primary text-white border border-0 "
                                    @onclick="@(()=>SetReaction(TaskModel.Id,-1))">
                                        <h5 class="oi oi-minus p-1 my-0"></h5>
                                        <h4 class="d-inline-block my-0">
                                            @TaskModel.Reaction.ValueSumNegative
                                        </h4>
                                    </button>
                                }
                                else
                                {
                                    <button class="btn  btn-outline-primary text-white border border-0 "
                                    @onclick="@(()=>SetReaction(TaskModel.Id,0))">
                                        <h5 class="oi oi-minus bg-danger p-1 rounded-3 my-0"></h5>
                                        <h4 class="d-inline-block my-0">
                                            @TaskModel.Reaction.ValueSumNegative
                                        </h4>
                                    </button>
                                }
                                @if (TaskModel.Reaction.Value <= 0)
                                {

                                    <button class="btn btn-outline-primary text-white border border-0 "
                                    @onclick="@(()=>SetReaction(TaskModel.Id,1))">
                                        <h5 class="oi oi-plus p-1 my-0"></h5>
                                        <h4 class="d-inline-block my-0">
                                            @TaskModel.Reaction.ValueSumPositive
                                        </h4>
                                    </button>
                                }
                                else
                                {
                                    <button class="btn btn-outline-primary text-white border border-0 "
                                    @onclick="@(()=>SetReaction(TaskModel.Id,0))">
                                        <h5 class="oi oi-plus p-1 bg-success rounded-3 my-0"></h5>
                                        <h4 class="d-inline-block my-0">
                                            @TaskModel.Reaction.ValueSumPositive
                                        </h4>
                                    </button>
                                }
                            </Authorized>
                            <NotAuthorized>
                                <button class="btn btn-outline-primary text-white border border-0 " @onclick="@_LoginPopup.ShowPopUp">
                                    <h5 class="oi oi-minus bg-danger p-1 my-0"></h5>
                                    <h4 class="d-inline-block my-0">
                                        @TaskModel.Reaction.ValueSumNegative
                                    </h4>
                                </button>
                                <button class="btn btn-outline-primary text-white border border-0 " @onclick="@_LoginPopup.ShowPopUp">
                                    <h5 class="oi oi-plus bg-success p-1 my-0"></h5>
                                    <h4 class="d-inline-block my-0">
                                        @TaskModel.Reaction.ValueSumPositive
                                    </h4>
                                </button>
                            </NotAuthorized>
                        </AuthorizeView>
                    </div>
                </div>
            </div>
            @if (Id > 0)
            {
                <div class="d-block">
                    <CommentComponentList Id="TaskModel.Id" />
                </div>
            }
        </div>
    </div>
}
else
{
    <span>Loading...</span>
}

@code {
    [Parameter]
    public TaskModel? TaskModel { get; set; }
    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public Func<Task>? Func { get; set; }
}
