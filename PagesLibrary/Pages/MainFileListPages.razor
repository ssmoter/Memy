@using PagesLibrary.Data.File

@inject ILogger<MainFileListPages> _logger
@inject IFileManager _iFileManager
@inject NavigationManager _navigation
@inject PopupListService _popUp

<div>
    @if (TaskModels != null)
    {
        @for (int i = 0; i < TaskModels.Length; i++)
        {
            <div>
                <h4>@TaskModels[i].Title</h4>
                <div>
                    <span>@TaskModels[i].User.Name</span>
                    <span>@TaskModels[i].CreatedDate</span>
                </div>
                <div>
                    @if (TaskModels[i].Tag != null)
                    {
                        for (int j = 0; j < TaskModels[i].Tag.Count; j++)
                        {
                            <span>@TaskModels[i].Tag[j].Value &nbsp;</span>
                        }
                    }
                </div>
                <div>
                    <p>
                        @TaskModels[i].Description
                    </p>
                </div>
                <div>
                    @if (TaskModels[i].FileModel != null)
                    {
                        @for (int j = 0; j < TaskModels[i].FileModel.Count; j++)
                        {
                            var img = (TaskModels[i].FileModel[j].Name, TaskModels[i].FileModel[j].Typ);
                            <img src="@(_iFileManager.GetImgAsync(img.Name,img.Typ))" alt="@img.Name" width="100" height="100" />
                        }
                    }
                </div>
            </div>
        }
    }
    else
    {
        <p>Loading...</p>
    }
    <div class="m-auto d-sm-flex justify-content-sm-center">
        @{
            var EnableBack = false;
            if (Start == null)
            {
                Start = 0;
                EnableBack = false;
            }
            if (Start != null)
            {
                EnableBack = (int)Start == 0 ? true : false;
            }
        }
        <dvi>
            <span class="m-auto d-sm-flex justify-content-sm-center">
                <button class="btn oi oi-arrow-thick-left btn-outline-dark" disabled="@EnableBack" @onclick="@(()=>ChangePage((int)Start-1))">@((int)Start - 1)</button>
                <button class="btn oi oi-arrow-thick-right btn-outline-dark" @onclick="@(()=>ChangePage((int)Start+1))">@((int)Start + 1)</button>
            </span>
            <div>
                @for (int i = (int)Start - 2; i < (int)Start + 3; i++)
                {
                    int index = i;
                    if (Start == index)
                    {
                        continue;
                    }
                    if (i > 2)
                    {
                        <button class="btn btn-outline-dark" @onclick="@(()=>ChangePage(index))">@i</button>
                    }
                }
            </div>
        </dvi>
    </div>
</div>


@code {
    [Parameter]
    public int? Start { get; set; } = 0;
    [Parameter]
    public int? Max { get; set; } = 10;
    [Parameter]
    public string? Categories { get; set; }
    [Parameter]
    public bool? Banned { get; set; } = false;
    [Parameter]
    public string? DateEnd { get; set; }
    [Parameter]
    public string? DateStart { get; set; }

    public TaskModel[]? TaskModels { get; set; }

    private async Task ChangePage(int index)
    {
        if (Categories != null)
        {
            if (Banned != null)
            {
                _navigation.NavigateTo($"/{Categories}/{index}/{Banned}");
            }
            else
            {
                _navigation.NavigateTo($"/{Categories}/{index}");
            }
        }
        else
        {
            _navigation.NavigateTo($"/{index}");
        }
        await GetTaskAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetTaskAsync();
    }

    private async Task GetTaskAsync()
    {
        try
        {
            if (Start == null)
            {
                Start = 0;
            }
            _logger.LogInformation("Initialized page");
            var result = await _iFileManager.GetTaskModelsAsync(Start, Categories, Max, Banned, DateEnd, DateStart);
            if (result.IsSuccessStatusCode)
            {
                TaskModels = Newtonsoft.Json.JsonConvert.DeserializeObject<TaskModel[]>(await result.Content.ReadAsStringAsync());
            }
            else
            {
                _logger.LogError(await result.Content.ReadAsStringAsync());
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex.Message);
        }
    }

}
