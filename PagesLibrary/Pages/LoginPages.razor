@implements IDisposable
@inject ILogger<LoginPages> _ilogger
@inject ILogInOut _logInOut
@inject NavigationManager _navigation
@inject AuthenticationStateProvider _authStateProvider
@inject PopupListService _popUp

<div>
    <EditForm EditContext="_editContext" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label style="color:white">
                Email
                <InputText class="form-group" id="email" @bind-Value="@_user.Email" placeholder="Email"></InputText>
                <ValidationMessage For="@(()=>_user.Email)" />
            </label>
        </div>
        <div class="form-group">
            <label style="color:white">
                Hasło
                <InputText class="form-group" id="password" type="password" @bind-Value="@_user.Password" placeholder="Hasło"></InputText>
                <ValidationMessage For="@(()=>_user.Password)" />
            </label>
        </div>
        <div>
            <label style="color:white" class="form-check-label">
                Chcesz, aby Cię nie wylogowywać?
                <InputCheckbox @bind-Value="@_user.DoNotLogOut"></InputCheckbox>
            </label>
        </div>
        <div>
            <button class="btn btn-primary" type="submit" disabled="@_formInvalid">Zaloguj</button>
        </div>
        @if (!string.IsNullOrWhiteSpace(error))
        {
            <div class="alert alert-danger">@error</div>
        }
    </EditForm>
</div>



@code {
    LoginUser _user = new LoginUser();
    EditContext? _editContext;
    private bool? _formInvalid = false;
    string? error = "";

    protected override void OnInitialized()
    {
        _ilogger.LogInformation("Initialized page");
        _editContext = new EditContext(_user);
        _editContext.OnFieldChanged += HandleFieldChanged;
    }
    public void HandleFieldChanged(object sender, FieldChangedEventArgs e)
    {
        if (_editContext != null)
        {
            _formInvalid = !_editContext.Validate();
        }
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        _ilogger.LogInformation("Valid Submit");
        if (_editContext != null)
        {
            try
            {
                var result = await _logInOut.LogIn(_user.Email, _user.Password, _user.DoNotLogOut);
                if (result.Item2 == System.Net.HttpStatusCode.OK)
                {
                    _user = new LoginUser();
                    await _authStateProvider.GetAuthenticationStateAsync();
                    _popUp.ShowToats("Zostałeś zalogowany", "Status logowania", PopupLevel.Level.Success);
                }
                else if (result.Item2 != System.Net.HttpStatusCode.OK)
                {
                    _ilogger.LogError(result.Item1);
                    _user.Password = "";
                    _popUp.ShowToats("Błąd logowania", "Status logowania", PopupLevel.Level.Warning);
                }
                if (result.Item2 == System.Net.HttpStatusCode.NoContent)
                {
                    _ilogger.LogError(result.Item1);
                    error = result.Item1;
                }
                if (result.Item2 == System.Net.HttpStatusCode.NotFound)
                {
                    _ilogger.LogError(result.Item1);
                    error = result.Item1;
                }
                if (result.Item2 == System.Net.HttpStatusCode.BadRequest)
                {
                    _ilogger.LogError(result.Item1);
                    error = "Wystąpił inny błąd";
                }
            }
            catch (Exception ex)
            {
                error = "Wystąpił inny błąd";
                _ilogger.LogError(ex.Message);
            }
        }
    }


    public void Dispose()
    {
        _ilogger.LogInformation("Dispose");
        if (_editContext != null)
        {
            _editContext.OnFieldChanged -= HandleFieldChanged;
        }
    }

    class LoginUser
    {
        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Email jest wymagany")]
        [System.ComponentModel.DataAnnotations.EmailAddress(ErrorMessage = "Email jest nieprawidłowy")]
        public string? Email { get; set; }
        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Hasło jest wymagane")]
        [System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength = 8, ErrorMessage = "Hasło jest za krótkie")]
        public string? Password { get; set; }
        public bool DoNotLogOut { get; set; } = false;
    }
}
