@using CompomentsLibrary.Model;
@if (List is not null)
{
    <div class="w-100">
        <div class="dropdown-header ">
            <h6>@Description </h6>
            <select class="dropdown form-select bg-black text-white" name="@nameof(List)"
            @onchange="@(EventCallback.Factory.Create(this,e => Value = new ValueInDropDownList(((ChangeEventArgs)e).Value.ToString(),GetItem2(((ChangeEventArgs)e).Value.ToString()))))">
                @for (int i = 0; i < List.Count; i++)
                {
                    if (List[i] is not null)
                    {
                        <option class="dropdown-item text-white" value="@List[i].Item1">@List[i].Item2</option>
                    }

                }
            </select>
        </div>
    </div>
}

@code {

    [Parameter]
    public string? Theme { get; set; }
    [Parameter]
    public string? Description { get; set; }
    [Parameter]
    public IList<ValueInDropDownList>? List { get; set; }

    [Parameter]
    public Func<Task>? Func { get; set; }

    ValueInDropDownList? _value;

    [Parameter]
    public ValueInDropDownList? Value
    {
        get => _value;

        set
        {
            if (_value != value)
            {
                _value = value;
                ValueChanged.InvokeAsync(_value);
                if (bInitialized)
                {
                    if (Func != null)
                    {
                        Func?.Invoke();
                    }
                }
                bInitialized = true;
            }
        }
    }


    string? GetItem2(string? item1)
    {
        string? result = "";
        if (List is not null)
        {
            result = List.First(x => x.Item1 == item1).Item2;
        }

        return result;
    }

    bool bInitialized = false;

    [Parameter]
    public EventCallback<ValueInDropDownList> ValueChanged { get; set; }

}

